# -*- coding: utf-8 -*-
"""Análise de Dados: Visualização de Dados II

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h1tyqAhPYplQkMiFoo0n56UzlUEe2Ecu

---

# **Exercícios**

Nestes exercícios, você deve decidir qual é o gráfico visto em aula que melhor visualiza uma base de dados. Após decidir, você deverá criar a visualização usando o conteúdo exposto durante a aula e adicionar um pequeno parágrafo sobre um insights que pode ser extraido do gráfico.

## 1\. Preços `outliers` de diamante
"""

import seaborn as sns

data = sns.load_dataset("diamonds")
data.head()

# gráfico do exercício 1


from matplotlib import pyplot as plt
data.plot(kind='scatter', x='table', y='price', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

"""**Insight do gráfico 1**: ...

---

## 2\. Correlação entre o do preço do diamante com seu peso (`carat`) agrupados por sua transparêcia (`clarity`)
"""

import seaborn as sns

data = sns.load_dataset("diamonds")
data.head()

# gráfico do exercício 2

diamonds = ...

# gráfico do exercício 2
from matplotlib import pyplot as plt
data['carat'].plot(kind='hist', bins=20, title='carat')
plt.gca().spines[['top', 'right',]].set_visible(False)

"""**Insight do gráfico 2**: ...

---

## 3\. Distribuição contínua aproximada do peso (`weight`) de carros
"""

import seaborn as sns

data = sns.load_dataset("mpg")
data.head()

# gráfico do exercício 3


from matplotlib import pyplot as plt
import seaborn as sns
data.groupby('origin').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['model_year']
  ys = series['mpg']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = data.sort_values('model_year', ascending=True)
for i, (series_name, series) in enumerate(df_sorted.groupby('origin')):
  _plot_series(series, series_name, i)
  fig.legend(title='origin', bbox_to_anchor=(1, 1), loc='upper left')
sns.despine(fig=fig, ax=ax)
plt.xlabel('modelo do ano')
_ = plt.ylabel('mpg')

"""**Insight do gráfico 3**: ...

---
"""